# Environment Variables
bt := '0'
export RUST_BACKTRACE := bt
log := "warn"
export JUST_LOG := log

# --- Python Environment & Dependencies ---
_python_req_in_prod   := "requirements.in"
_python_req_txt_prod  := "requirements.txt"
_python_req_in_dev    := "requirements-dev.in"
_python_req_txt_dev   := "requirements-dev.txt"

# --- Ansible Galaxy ---
_ansible_galaxy_req_file := "requirements.yaml"

# List recipes by default
default:
  just --list

# Check if 1Password CLI is installed and authenticated
check-op:
  #!/usr/bin/env sh
  if ! command -v op > /dev/null; then
    echo "‚ùå 1Password CLI ('op') is not installed. Please install it first."
    exit 1
  fi
  WHOAMI_OUTPUT="$(op whoami 2>/dev/null)"
  if [ -z "$WHOAMI_OUTPUT" ]; then
    echo "‚ùå 1Password CLI is installed but no authenticated session found. Please run: op signin"
    exit 1
  fi
  echo "‚úÖ 1Password CLI is installed and authenticated as:"
  echo "$WHOAMI_OUTPUT"

# Ensure Incus instance is running
check-incus-instance HOST:
  #!/usr/bin/env sh
  if ! incus list --format csv | grep -i -q "^{{HOST}},running"; then
    echo "‚ö†Ô∏è  Instance '{{HOST}}' is not running. Starting it now..."
    incus start {{HOST}}
    sleep 5  # Give some time for it to start
  fi
  echo "‚úÖ  Instance '{{HOST}}' is running."

# Create a venv if it doesn't exist and upgrade pip
venv:
  #!/usr/bin/env sh
  if [ ! -d .venv ]; then
    echo "üêç Creating Python virtual environment using \`python --version\`..."
    python -m venv .venv
  else
    echo "üêç Python virtual environment .venv already exists."
  fi
  echo "üêç Upgrading pip in .venv..."
  .venv/bin/pip install --upgrade pip

# Compile production Python dependencies using pip-compile
compile-prod: venv
  #!/usr/bin/env sh
  if [ -f "{{_python_req_in_prod}}" ]; then
    echo "üì¶ Compiling production dependencies from {{_python_req_in_prod}}..."
    .venv/bin/pip-compile --resolver=backtracking "{{_python_req_in_prod}}" -o "{{_python_req_txt_prod}}"
    echo "‚úÖ Production requirements compiled to {{_python_req_txt_prod}}"
  else
    echo "‚ö†Ô∏è {{_python_req_in_prod}} not found. Skipping production compilation."
  fi

# Compile development Python dependencies (includes prod)
compile-dev: compile-prod
  #!/usr/bin/env sh
  if [ -f "{{_python_req_in_dev}}" ]; then
    echo "üì¶ Compiling development dependencies from {{_python_req_in_dev}}..."
    .venv/bin/pip-compile --resolver=backtracking "{{_python_req_in_dev}}" -o "{{_python_req_txt_dev}}"
    echo "‚úÖ Development requirements compiled to {{_python_req_txt_dev}}"
  else
    echo "‚ÑπÔ∏è {{_python_req_in_dev}} not found. Skipping development compilation."
  fi

# Install production Python dependencies from the locked file
install-prod: venv
  #!/usr/bin/env sh
  if [ -f "{{_python_req_txt_prod}}" ]; then
    echo "üêç Installing production Python dependencies from {{_python_req_txt_prod}}..."
    .venv/bin/pip install -r "{{_python_req_txt_prod}}"
    echo "‚úÖ Production Python dependencies installed."
  else
    echo "‚ö†Ô∏è {{_python_req_txt_prod}} not found. Run 'just compile-prod' or ensure the file exists."
  fi

# Install development Python dependencies (includes prod)
install-dev: install-prod # Ensure prod dependencies are installed first
  #!/usr/bin/env sh
  if [ -f "{{_python_req_txt_dev}}" ]; then
    echo "üêç Installing development Python dependencies from {{_python_req_txt_dev}}..."
    .venv/bin/pip install -r "{{_python_req_txt_dev}}"
    echo "‚úÖ Development Python dependencies installed."
  else
    echo "‚ÑπÔ∏è {{_python_req_txt_dev}} not found. Only production dependencies installed (if {{_python_req_txt_prod}} exists)."
  fi

# Installs dev dependencies (which includes prod)
install: compile-dev install-dev
  @echo "üéâ All Python dependencies compiled and installed."

# Clean the Python virtual environment
clean-venv:
  rm -rf .venv
  rm -f {{_python_req_txt_prod}} {{_python_req_txt_dev}} # Also remove generated txt files
  @echo "üóëÔ∏è .venv directory and generated requirements files removed."

# Run Ansible playbook for Proxmox setup
setup HOST *TAGS: check-op
  ansible-playbook -i ./inventories/home-network/inventory-setup.yaml run.yaml --limit {{HOST}} {{TAGS}} --ask-pass -e SETUP=true

# Run defined Ansible playbook for HOST
run HOST *TAGS: check-op
  ansible-playbook -b run.yaml --limit {{HOST}} {{TAGS}}

# Install Ansible Galaxy requirements
reqs *FORCE: install-prod
  ansible-galaxy install -r requirements.yaml {{FORCE}}

# Perform an action (encrypt/decrypt/edit) on Ansible vault
vault ACTION: check-op
  EDITOR='code --wait' ansible-vault {{ACTION}} vars/vault.yaml

# Test Ansible playbook for HOST on incus
test HOST *TAGS: check-op
  just check-incus-instance {{HOST}}
  ansible-playbook -i ./inventories/incus/inventory.yaml -b run.yaml --limit {{HOST}} {{TAGS}}