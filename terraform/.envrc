# ./terraform/.envrc
# Terraform Environment Setup

log_status "Loading Terraform environment..."

# Option 1: Using asdf (Recommended if you use asdf for other tools)
# 1. Make sure asdf is installed and you have the asdf-direnv integration
#    (e.g., `source ~/.asdf/plugins/asdf-direnv/asdf-direnv.sh` or similar in your shell rc or direnvrc)
#    or a global `use asdf` in your ~/.config/direnv/direnvrc.
# 2. Create a .tool-versions file in THIS (terraform/) directory:
#    terraform 1.8.0  # Replace with your desired version
# The .envrc file might then just need:
# use asdf
# If not using a global 'use asdf', you might need to explicitly call it here.
# If asdf is setup globally with direnv hook, this .envrc might even be empty if only using .tool-versions

# Option 2: Using tfenv with direnv
# This often relies on tfenv's own direnv integration or a .terraform-version file.
# You might need `use terraform` if your direnv stdlib supports it
# or if tfenv has installed a direnv snippet.

# Option 3: If Terraform is in your global PATH and you don't need version management here:
# No specific direnv commands needed for version selection.

# Example: Set Terraform environment variables
# export TF_LOG="INFO" # Or DEBUG for more verbosity
# export TF_VAR_prefix="homelab"
# export AWS_PROFILE="my-homelab-profile" # If using AWS with profiles

log_status "Terraform environment ready. Ensure Terraform CLI is available."
